(window['webpackJsonpTQPrism'] = window['webpackJsonpTQPrism'] || []).push([
  [4],
  {
    /***/ 195: /***/ function (
      module,
      __webpack_exports__,
      __webpack_require__,
    ) {
      'use strict';
      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'default',
        function () {
          return _default;
        },
      );
      /* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        196,
      );
      /* harmony import */ var _tq_prism_prism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        1,
      );
      /* harmony import */ var _tq_prism_prism__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __webpack_require__.n(
        _tq_prism_prism__WEBPACK_IMPORTED_MODULE_1__,
      );
      /* harmony import */ var _tq_prism_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        3,
      );
      /* harmony import */ var _tq_prism_utils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __webpack_require__.n(
        _tq_prism_utils__WEBPACK_IMPORTED_MODULE_2__,
      );
      /* harmony import */ var _native_apis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        197,
      );
      /* harmony import */ var _tarojs_taro_h5__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        205,
      );
      /* harmony import */ var _tarojs_taro_h5__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __webpack_require__.n(
        _tarojs_taro_h5__WEBPACK_IMPORTED_MODULE_4__,
      );
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function');
        }
      }

      var _default = function _default(args) {
        var _this = this;

        _classCallCheck(this, _default);

        Object.assign(this, _tarojs_taro_h5__WEBPACK_IMPORTED_MODULE_4__);
        var list = [
          _tq_prism_prism__WEBPACK_IMPORTED_MODULE_1___default.a,
          _api__WEBPACK_IMPORTED_MODULE_0__['default'],
        ];
        list.forEach(function (fn) {
          return fn.call(_this, args);
        });

        this.url2base64 = function () {
          var _ref =
              arguments.length > 0 && arguments[0] !== undefined
                ? arguments[0]
                : {},
            success = _ref.success,
            fail = _ref.fail,
            url = _ref.url;

          return Object(_tq_prism_utils__WEBPACK_IMPORTED_MODULE_2__['wrapFn'])(
            success,
            fail,
            function (success, fail) {
              var blobToDataURL = function blobToDataURL(blob) {
                var reader = new FileReader();

                reader.onload = function (e) {
                  success(e.target.result.split(',')[1]);
                };

                reader.readAsDataURL(blob);
              };

              fetch(url)
                .then(function (r) {
                  return r.blob();
                })
                .then(blobToDataURL)
                ['catch'](fail);
            },
          );
        };

        this.createCanvasContext = function (selector, scope) {
          var canvas = document.querySelector(
            'canvas[canvasid="'.concat(selector, '"]'),
          );
          var ctx = canvas.getContext('2d');

          ctx.setTextBaseline = function (value) {
            ctx.textBaseline = value;
          };

          ctx.setTextAlign = function (value) {
            ctx.textAlign = value;
          };

          ctx.setFillStyle = function (value) {
            ctx.fillStyle = value;
          };

          ctx.setFontSize = function (value) {
            ctx.font = ''.concat(value, 'px serif');
          };

          return ctx;
        };

        this.getImageInfo = function () {
          var _ref2 =
              arguments.length > 0 && arguments[0] !== undefined
                ? arguments[0]
                : {},
            src = _ref2.src,
            success = _ref2.success,
            fail = _ref2.fail;

          return Object(_tq_prism_utils__WEBPACK_IMPORTED_MODULE_2__['wrapFn'])(
            success,
            fail,
            function (success, fail) {
              _native_apis__WEBPACK_IMPORTED_MODULE_3__['getImageInfo']
                .handle({
                  src: src,
                })
                .then(success)
                ['catch'](fail);
            },
          );
        };

        this.saveImageToPhotosAlbum = function () {
          var _ref3 =
              arguments.length > 0 && arguments[0] !== undefined
                ? arguments[0]
                : {},
            filePath = _ref3.filePath,
            success = _ref3.success,
            fail = _ref3.fail;

          return Object(_tq_prism_utils__WEBPACK_IMPORTED_MODULE_2__['wrapFn'])(
            success,
            fail,
            function (success, fail) {
              _native_apis__WEBPACK_IMPORTED_MODULE_3__[
                'saveImageToPhotosAlbum'
              ]
                .handle({
                  filePath: filePath,
                })
                .then(success)
                ['catch'](fail);
            },
          );
        };
      };

      /***/
    },

    /***/ 196: /***/ function (
      module,
      __webpack_exports__,
      __webpack_require__,
    ) {
      'use strict';
      __webpack_require__.r(__webpack_exports__);
      function _typeof(obj) {
        if (
          typeof Symbol === 'function' &&
          typeof Symbol.iterator === 'symbol'
        ) {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj &&
              typeof Symbol === 'function' &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          };
        }
        return _typeof(obj);
      }

      /* harmony default export */ __webpack_exports__['default'] = function (
        _ref,
      ) {
        var apiUrl = _ref.apiUrl,
          appKey = _ref.appKey;

        var serializeParams = function serializeParams(params) {
          if (!params) {
            return '';
          }

          return Object.keys(params)
            .map(function (key) {
              return ''
                .concat(encodeURIComponent(key), '=')
                .concat(
                  _typeof(params[key]) === 'object'
                    ? encodeURIComponent(JSON.stringify(params[key]))
                    : encodeURIComponent(params[key]),
                );
            })
            .join('&');
        };

        var createOnLoadHandler = function createOnLoadHandler(
          xhr,
          resolve,
          reject,
        ) {
          return function () {
            var response = xhr.response;

            if (xhr.status === 200) {
              if (response.code == 0) {
                resolve(response.data);
              } else {
                reject(response.msg);
              }
            } else {
              reject(response);
            }
          };
        };

        var get = function get(api, data) {
          return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            var url = ''
              .concat(apiUrl, '/')
              .concat(api, '?appKey=')
              .concat(appKey, '&')
              .concat(serializeParams(data));
            xhr.open('GET', url);
            xhr.responseType = 'json';
            xhr.onload = createOnLoadHandler(xhr, resolve, reject);
            xhr.onerror = reject;
            xhr.send();
          });
        };

        var post = function post(api, data) {
          return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            var url = ''
              .concat(apiUrl, '/')
              .concat(api, '?appKey=')
              .concat(appKey);
            xhr.open('POST', url);
            xhr.setRequestHeader('content-type', 'application/json');
            xhr.responseType = 'json';
            xhr.onload = createOnLoadHandler(xhr, resolve, reject);
            xhr.onerror = reject;
            xhr.send(JSON.stringify(data));
          });
        };

        this.api = {
          get: get,
          post: post,
        };
      };

      /***/
    },

    /***/ 197: /***/ function (
      module,
      __webpack_exports__,
      __webpack_require__,
    ) {
      'use strict';
      __webpack_require__.r(__webpack_exports__);
      /* harmony import */ var _open_location__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        198,
      );
      /* harmony reexport (safe) */ __webpack_require__.d(
        __webpack_exports__,
        'openLocation',
        function () {
          return _open_location__WEBPACK_IMPORTED_MODULE_0__['default'];
        },
      );

      /* harmony import */ var _contact_picker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
        200,
      );
      /* harmony reexport (safe) */ __webpack_require__.d(
        __webpack_exports__,
        'contactPicker',
        function () {
          return _contact_picker__WEBPACK_IMPORTED_MODULE_1__['default'];
        },
      );

      /* harmony import */ var _get_image_info__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
        201,
      );
      /* harmony reexport (safe) */ __webpack_require__.d(
        __webpack_exports__,
        'getImageInfo',
        function () {
          return _get_image_info__WEBPACK_IMPORTED_MODULE_2__['default'];
        },
      );

      /* harmony import */ var _save_image_to_photos_album__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
        202,
      );
      /* harmony reexport (safe) */ __webpack_require__.d(
        __webpack_exports__,
        'saveImageToPhotosAlbum',
        function () {
          return _save_image_to_photos_album__WEBPACK_IMPORTED_MODULE_3__[
            'default'
          ];
        },
      );

      /* harmony import */ var _upload_file__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
        203,
      );
      /* harmony reexport (safe) */ __webpack_require__.d(
        __webpack_exports__,
        'uploadFile',
        function () {
          return _upload_file__WEBPACK_IMPORTED_MODULE_4__['default'];
        },
      );

      /***/
    },

    /***/ 198: /***/ function (
      module,
      __webpack_exports__,
      __webpack_require__,
    ) {
      'use strict';
      __webpack_require__.r(__webpack_exports__);
      /* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        199,
      );

      /* harmony default export */ __webpack_exports__['default'] = {
        addStyle: function addStyle() {
          var element = document.createElement('style');
          element.innerHTML = _strings__WEBPACK_IMPORTED_MODULE_0__['style'];
          var head = document.getElementsByTagName('head')[0];
          head.appendChild(element);
        },
        handle: function handle(_ref) {
          var longitude = _ref.longitude,
            latitude = _ref.latitude,
            _ref$name = _ref.name,
            name = _ref$name === void 0 ? '信息点' : _ref$name;
          return new Promise(function (resolve, reject) {
            var element = document.createElement('div');
            element.innerHTML = _strings__WEBPACK_IMPORTED_MODULE_0__['html'];
            document.body.appendChild(element);
            document
              .querySelector('.tq-h5-container-gis-view-close')
              .addEventListener('click', function () {
                element.remove();
              });
            var src = 'https://m.amap.com/navi/?dest='
              .concat(longitude, ',')
              .concat(latitude, '&destName=')
              .concat(
                name,
                '&hideRouteIcon=1&key=1e04f956b4916ccc76323366545781f3',
              );
            document.querySelector(
              '#tq-h5-container-gis-view-iframe',
            ).src = src;
          });
        },
      };

      /***/
    },

    /***/ 199: /***/ function (
      module,
      __webpack_exports__,
      __webpack_require__,
    ) {
      'use strict';
      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'style',
        function () {
          return style;
        },
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'html',
        function () {
          return html;
        },
      );
      var style =
        "\n    .tq-h5-container-gis-view {\n        display: flex;\n        flex-direction: column;\n        min-height: 100vh;\n        width: 100%;\n        background-color: #f6f6f6;\n        overflow-Y: 'hidden';\n        overflow-x: 'hidden';\n        position: fixed;\n        top: 0px;\n        left: 0px;\n    }\n    .tq-h5-container-gis-view iframe {\n        height: 100%;\n        width: 100%;\n        position: fixed;\n        left: 0px;\n        top: 0px;\n        z-index: 9999;\n        overflow-Y: 'hidden';\n        overflow-x: 'hidden';\n    }\n    .tq-h5-container-gis-view-header{\n        display: flex;\n        flex-direction: row;\n        justify-content:space-between;\n        z-index: 10000;\n        padding: 10px;\n        background-color: #ffffff;\n        border-bottom: 1px solid #e9ecef;\n    }\n    .tq-h5-container-gis-view-title{\n        font-weight: bold;\n    }\n    .tq-h5-container-gis-view-close{\n        font-size: 1rem;\n        font-weight: 700;\n        line-height: 1;\n        color: #000;\n        text-shadow: 0 1px 0 #fff;\n        opacity: .5;\n    }\n";
      var html =
        '\n    <div class="tq-h5-container-gis-view">\n        <div class="tq-h5-container-gis-view-header">\n            <div class="tq-h5-container-gis-view-title">\u5929\u9619\u5730\u56FE</div>\n            <div class="tq-h5-container-gis-view-close">X</div>\n        </div>\n        <iframe id="tq-h5-container-gis-view-iframe" src=""></iframe>\n    </div>\n';

      /***/
    },

    /***/ 200: /***/ function (
      module,
      __webpack_exports__,
      __webpack_require__,
    ) {
      'use strict';
      __webpack_require__.r(__webpack_exports__);
      // import $ from 'jquery'
      // import { style, html } from './strings'
      /* harmony default export */ __webpack_exports__['default'] = {
        addStyle: function addStyle() {
          // const element=document.createElement('style')
          // element.innerHTML=style.replace('<style>','').replace('</style>','')
          // const head = document.getElementsByTagName("head")[0]
          // head.appendChild(element)
        },
        handle: function handle(_ref) {
          var users = _ref.users;
          return new Promise(function (resolve, reject) {
            // const $html = $(html)
            // const $content = $html.find('.contactPicker-content')
            // const updateButtonCount = () => {
            //     const count = $html.find('[name="contactPicker"]:checked').length
            //     $html.find('#btn-ok').text(`确定(${count}/1000)`)
            // }
            // users.forEach(user => {
            //     $content.append(`<div class="wx-check-item"><input name="contactPicker" data-head-img-url="${user.headimgurl}" data-name="${user.nickname}" value="${user.openid}" type="checkbox"><div class="wx-img-container"><img class="wx-img" src="${user.headimgurl}" /></div>${user.nickname}</div>`)
            // })
            // $html.find('#btn-ok').click(function () {
            //     const list = [];
            //     $html.find('[name="contactPicker"]:checked').each(function () {
            //         const $user = $(this)
            //         list.push({ userId: $user.val(), userName: $user.attr('data-name'), headImgUrl: $user.attr('data-head-img-url') })
            //     })
            //     resolve(list)
            //     $html.remove()
            // })
            // $html.find('#btn-cancel').click(() => {
            //     resolve([])
            //     $html.remove()
            // })
            // $html.find('[name="contactPicker"]').click(() => {
            //     updateButtonCount()
            // })
            // $html.find('#check-all').click(() => {
            //     const checked = $html.find('#check-all:checked').length > 0;
            //     $html.find('[name="contactPicker"]').each(function () {
            //         const $el = $(this)
            //         if ($el.prop("checked") != checked) $el.click()
            //     })
            //     updateButtonCount()
            // })
            // $('body').append($html)
          });
        },
      };

      /***/
    },

    /***/ 201: /***/ function (
      module,
      __webpack_exports__,
      __webpack_require__,
    ) {
      'use strict';
      __webpack_require__.r(__webpack_exports__);
      /**
       * 通过canva转换获取图片的base64信息
       */
      /* harmony default export */ __webpack_exports__['default'] = {
        handle: function handle(_ref) {
          var src = _ref.src;
          return new Promise(function (resolve, reject) {
            var img = new Image();
            img.crossOrigin = 'Anonymous';
            img.src = src;

            img.onload = function () {
              var canvas = document.createElement('canvas');
              var ctx = canvas.getContext('2d');
              canvas.width = img.naturalWidth;
              canvas.height = img.naturalHeight;
              ctx.drawImage(img, 0, 0, 300, 200);
              resolve({
                errMsg: 'getImageInfo:ok',
                width: img.naturalWidth,
                height: img.naturalHeight,
                path: img, // canvas.toDataURL()
              });
            };
          });
        },
      };

      /***/
    },

    /***/ 202: /***/ function (
      module,
      __webpack_exports__,
      __webpack_require__,
    ) {
      'use strict';
      __webpack_require__.r(__webpack_exports__);
      /**
       * 下载src的值为base64的图片到本地
       */
      /* harmony default export */ __webpack_exports__['default'] = {
        handle: function handle(_ref) {
          var filePath = _ref.filePath;
          return new Promise(function (resolve, reject) {
            var aLink = document.createElement('a');
            aLink.href = filePath;
            aLink.download = new Date().getTime() + '.jpeg';
            document.body.appendChild(aLink);
            aLink.click();
            document.body.removeChild(aLink);
            resolve();
          });
        },
      };

      /***/
    },

    /***/ 203: /***/ function (
      module,
      __webpack_exports__,
      __webpack_require__,
    ) {
      'use strict';
      __webpack_require__.r(__webpack_exports__);
      /* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
        204,
      );

      var createUploadTask = function createUploadTask(_ref) {
        var url = _ref.url,
          filePath = _ref.filePath,
          formData = _ref.formData,
          name = _ref.name,
          fileName = _ref.fileName,
          header = _ref.header,
          success = _ref.success,
          error = _ref.error;
        var timeout;
        var formKey;
        var apiName = 'uploadFile';
        var xhr = new XMLHttpRequest();
        var form = new FormData();
        var callbackManager = {
          headersReceived: Object(
            _utils__WEBPACK_IMPORTED_MODULE_0__['createCallbackManager'],
          )(),
          progressUpdate: Object(
            _utils__WEBPACK_IMPORTED_MODULE_0__['createCallbackManager'],
          )(),
        };
        xhr.open('POST', url);
        Object(_utils__WEBPACK_IMPORTED_MODULE_0__['setHeader'])(xhr, header);

        for (formKey in formData) {
          form.append(formKey, formData[formKey]);
        }

        xhr.upload.onprogress = function (e) {
          var loaded = e.loaded,
            total = e.total;
          callbackManager.progressUpdate.trigger({
            progress: Math.round((loaded / total) * 100),
            totalBytesSent: loaded,
            totalBytesExpectedToSent: total,
          });
        };

        xhr.onreadystatechange = function () {
          if (
            xhr.readyState !==
            _utils__WEBPACK_IMPORTED_MODULE_0__['XHR_STATS'].HEADERS_RECEIVED
          )
            return;
          callbackManager.headersReceived.trigger({
            header: xhr.getAllResponseHeaders(),
          });
        };

        xhr.onload = function () {
          var status = xhr.status;
          success({
            errMsg: ''.concat(apiName, ':ok'),
            statusCode: status,
            data: xhr.responseText || xhr.response,
          });
        };

        xhr.onabort = function () {
          clearTimeout(timeout);
          error({
            errMsg: ''.concat(apiName, ':fail abort'),
          });
        };

        xhr.onerror = function (e) {
          error({
            errMsg: ''.concat(apiName, ':fail ').concat(e.message),
          });
        };

        var send = function send() {
          xhr.send(form);
          timeout = setTimeout(function () {
            xhr.onabort = null;
            xhr.onload = null;
            xhr.upload.onprogress = null;
            xhr.onreadystatechange = null;
            xhr.onerror = null;
            abort();
            error({
              errMsg: ''.concat(apiName, ':fail timeout'),
            });
          }, _utils__WEBPACK_IMPORTED_MODULE_0__['NETWORK_TIMEOUT']);
        };

        Object(_utils__WEBPACK_IMPORTED_MODULE_0__['convertObjectUrlToBlob'])(
          filePath,
        )
          .then(function (fileObj) {
            form.append(
              name,
              fileObj,
              fileObj.name || fileName || 'file-'.concat(Date.now()),
            );
            send();
          })
          ['catch'](function (e) {
            error({
              errMsg: ''.concat(apiName, ':fail ').concat(e.message),
            });
          });
        /**
         * 中断任务
         */

        var abort = function abort() {
          xhr.abort();
        };
        /**
         * 监听 HTTP Response Header 事件。会比请求完成事件更早
         * @param {HeadersReceivedCallback} callback HTTP Response Header 事件的回调函数
         */

        var onHeadersReceived = callbackManager.headersReceived.add;
        /**
         * 取消监听 HTTP Response Header 事件
         * @param {HeadersReceivedCallback} callback HTTP Response Header 事件的回调函数
         */

        var offHeadersReceived = callbackManager.headersReceived.remove;
        /**
         * 监听进度变化事件
         * @param {ProgressUpdateCallback} callback HTTP Response Header 事件的回调函数
         */

        var onProgressUpdate = callbackManager.progressUpdate.add;
        /**
         * 取消监听进度变化事件
         * @param {ProgressUpdateCallback} callback HTTP Response Header 事件的回调函数
         */

        var offProgressUpdate = callbackManager.progressUpdate.remove;
        return {
          abort: abort,
          onHeadersReceived: onHeadersReceived,
          offHeadersReceived: offHeadersReceived,
          onProgressUpdate: onProgressUpdate,
          offProgressUpdate: offProgressUpdate,
        };
      };
      /**
       * 将本地资源上传到服务器。客户端发起一个 HTTPS POST 请求，其中 content-type 为 multipart/form-data。使用前请注意阅读相关说明。
       * @param {Object} object 参数
       * @param {string} object.url 开发者服务器地址
       * @param {string} object.filePath 要上传文件资源的路径
       * @param {string} object.name 文件对应的 key，开发者在服务端可以通过这个 key 获取文件的二进制内容
       * @param {Object} [object.header] HTTP 请求 Header，Header 中不能设置 Referer
       * @param {Object} [object.formData] HTTP 请求中其他额外的 form data
       * @param {function} [object.success] 接口调用成功的回调函数
       * @param {function} [object.fail] 接口调用失败的回调函数
       * @param {function} [object.complete] 接口调用结束的回调函数（调用成功、失败都会执行）
       * @returns {UploadTask}
       */

      var index = function index(_ref2) {
        var url = _ref2.url,
          filePath = _ref2.filePath,
          name = _ref2.name,
          fileName = _ref2.fileName,
          header = _ref2.header,
          formData = _ref2.formData,
          _success = _ref2.success,
          fail = _ref2.fail,
          complete = _ref2.complete;
        var task;
        var promise = new Promise(function (resolve, reject) {
          task = createUploadTask({
            url: url,
            header: header,
            name: name,
            fileName: fileName,
            filePath: filePath,
            formData: formData,
            success: function success(res) {
              _success && _success(res);
              complete && complete();
              resolve(res);
            },
            error: function error(res) {
              fail && fail(res);
              complete && complete();
              reject(res);
            },
          });
        });
        promise.headersReceive = task.onHeadersReceived;
        promise.progress = task.onProgressUpdate;
        promise.abort = task.abort;
        return promise;
      };

      /* harmony default export */ __webpack_exports__['default'] = index;

      /***/
    },

    /***/ 204: /***/ function (
      module,
      __webpack_exports__,
      __webpack_require__,
    ) {
      'use strict';
      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'NETWORK_TIMEOUT',
        function () {
          return NETWORK_TIMEOUT;
        },
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'XHR_STATS',
        function () {
          return XHR_STATS;
        },
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'setHeader',
        function () {
          return setHeader;
        },
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'convertObjectUrlToBlob',
        function () {
          return convertObjectUrlToBlob;
        },
      );
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'createCallbackManager',
        function () {
          return createCallbackManager;
        },
      );
      var NETWORK_TIMEOUT = 60000;
      var XHR_STATS = {
        UNSENT: 0,
        // Client has been created. open() not called yet.
        OPENED: 1,
        // open() has been called.
        HEADERS_RECEIVED: 2,
        // send() has been called, and headers and status are available.
        LOADING: 3,
        // Downloading; responseText holds partial data.
        DONE: 4, // The operation is complete.
      };
      /**
       * 设置xhr的header
       * @param {XMLHttpRequest} xhr
       * @param {Object} header
       */

      var setHeader = function setHeader(xhr, header) {
        var headerKey;

        for (headerKey in header) {
          xhr.setRequestHeader(headerKey, header[headerKey]);
        }
      };
      /**
       * 将 blob url 转化为文件
       * @param {string} url 要转换的 blob url
       * @returns {Promise<File>}
       */

      var convertObjectUrlToBlob = function convertObjectUrlToBlob(url) {
        return new Promise(function (resolve, reject) {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', url, true);
          xhr.responseType = 'blob';

          xhr.onload = function (e) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              /* eslint-disable prefer-promise-reject-errors */
              reject({
                status: this.status,
              });
            }
          };

          xhr.send();
        });
      };
      var createCallbackManager = function createCallbackManager() {
        var callbacks = [];
        /**
         * 添加回调
         * @param {{ callback: function, ctx: any } | function} opt
         */

        var add = function add(opt) {
          callbacks.push(opt);
        };
        /**
         * 移除回调
         * @param {{ callback: function, ctx: any } | function} opt
         */

        var remove = function remove(opt) {
          var pos = -1;
          callbacks.forEach(function (callback, k) {
            if (callback === opt) {
              pos = k;
            }
          });

          if (pos > -1) {
            callbacks.splice(pos, 1);
          }
        };
        /**
         * 获取回调函数数量
         * @return {number}
         */

        var count = function count() {
          return callbacks.length;
        };
        /**
         * 触发回调
         * @param  {...any} args 回调的调用参数
         */

        var trigger = function trigger() {
          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key];
          }

          callbacks.forEach(function (opt) {
            if (typeof opt === 'function') {
              opt.apply(void 0, args);
            } else {
              var callback = opt.callback,
                ctx = opt.ctx;
              callback.call.apply(callback, [ctx].concat(args));
            }
          });
        };

        return {
          add: add,
          remove: remove,
          count: count,
          trigger: trigger,
        };
      };

      /***/
    },
  },
]);
